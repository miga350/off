from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from database.db import SessionLocal
from database.models import User
from keyboards import get_accept_keyboard, get_main_keyboard, get_cancel_keyboard
from states import CheckPDFStates

router = Router()

@router.message(commands=["start"])
async def start_command(message: types.Message, state: FSMContext):
    async with SessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            user = User(user_id=message.from_user.id)
            session.add(user)
            await session.commit()
            await session.refresh(user)

        if not user.accepted_terms:
            await message.answer(
                "üîê –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ñ–µ—Ä—Ç—ã.",
                reply_markup=get_accept_keyboard()
            )
        else:
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_keyboard())

@router.message(lambda msg: msg.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è")
async def accept_terms(message: types.Message, state: FSMContext):
    async with SessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if user and not user.accepted_terms:
            user.accepted_terms = True
            await session.commit()
            await message.answer("–°–ø–∞—Å–∏–±–æ, –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è.", reply_markup=get_main_keyboard())


@router.message(lambda msg: msg.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def upload_prompt(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 20 –ú–ë) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\".",
        reply_markup=get_cancel_keyboard(),
    )
    await state.set_state(CheckPDFStates.waiting_file)
